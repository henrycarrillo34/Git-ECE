
SPI1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000184  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  000008e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000082  00000000  00000000  00000947  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000028b  00000000  00000000  000009c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a2  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039b  00000000  00000000  00000df6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000080  00000000  00000000  00001194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000155  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000056  00000000  00000000  00001369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000013bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

uint8_t datoRecibido = 0x00;

int main(void)
{
    SPI_init();
  7c:	0e 94 6b 00 	call	0xd6	; 0xd6 <SPI_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	8f e3       	ldi	r24, 0x3F	; 63
  82:	9c e9       	ldi	r25, 0x9C	; 156
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <main+0x8>
  88:	00 c0       	rjmp	.+0      	; 0x8a <main+0xe>
  8a:	00 00       	nop

    _delay_ms(10);
	
	SPI_slaveON(1);
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	0e 94 7a 00 	call	0xf4	; 0xf4 <SPI_slaveON>
	SPI_tx(0x01);
  92:	81 e0       	ldi	r24, 0x01	; 1
  94:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_tx>
	datoRecibido = SPI_rx();
  98:	0e 94 82 00 	call	0x104	; 0x104 <SPI_rx>
  9c:	80 93 60 00 	sts	0x0060, r24
	SPI_tx(0x02);
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_tx>
	datoRecibido = SPI_rx();
  a6:	0e 94 82 00 	call	0x104	; 0x104 <SPI_rx>
  aa:	80 93 60 00 	sts	0x0060, r24
	SPI_tx(0x03);
  ae:	83 e0       	ldi	r24, 0x03	; 3
  b0:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_tx>
	datoRecibido = SPI_rx();
  b4:	0e 94 82 00 	call	0x104	; 0x104 <SPI_rx>
  b8:	80 93 60 00 	sts	0x0060, r24
	SPI_tx(0x04);
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_tx>
	datoRecibido = SPI_rx();
  c2:	0e 94 82 00 	call	0x104	; 0x104 <SPI_rx>
  c6:	80 93 60 00 	sts	0x0060, r24
	SPI_tx(0x05);
  ca:	85 e0       	ldi	r24, 0x05	; 5
  cc:	0e 94 7e 00 	call	0xfc	; 0xfc <SPI_tx>
	datoRecibido = SPI_rx();
  d0:	0e 94 82 00 	call	0x104	; 0x104 <SPI_rx>
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x58>

000000d6 <SPI_init>:
	/*	Pines de la interface de comunicación
		PB5: MOSI (SALIDA)
		PB6: MISO (ENTRADA)
		PB7: CLK  (SALIDA)
	*/
	DDRB |=  (1<<DDB5)|(1<<DDB7);  
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	80 6a       	ori	r24, 0xA0	; 160
  da:	87 bb       	out	0x17, r24	; 23
	DDRB &=~ (1<<DDB6);
  dc:	be 98       	cbi	0x17, 6	; 23

	/*	Pin de control para esclavo (SS)
		PB4: Esclavo 
	*/
	DDRB |= (1<<DDB4); // SALIDA
  de:	bc 9a       	sbi	0x17, 4	; 23
	PORTB |= (1<<PORTB4); // EN ALTO para que el esclavo se puede comunicar al inicio
  e0:	c4 9a       	sbi	0x18, 4	; 24

	/*	Orden de salida de los datos 
		DORD = 0, El bit más significativo (MSB) es enviado primero, tmb es por default
		DORD = 1, El bit menos significativo (LSB) es enviado primero
	*/
	SPCR &=~ (1<<DORD); //MSB
  e2:	6d 98       	cbi	0x0d, 5	; 13
		  0	  |   0    |  Clock inactivo en bajo, detección de bits en flanco de subida
		  0	  |   1    |  Clock inactivo en bajo, detección de bits en flanco de bajada
		  1	  |   0    |  Clock inactivo en alto, detección de bits en flanco de bajada
		  1	  |   1    |  Clock inactivo en alto, detección de bits en flanco de subida			
	*/
	SPCR &=~ (1<<CPOL); //por defecto es 0 
  e4:	6b 98       	cbi	0x0d, 3	; 13
	SPCR &=~ (1<<CPHA); //por defecto es 0  
  e6:	6a 98       	cbi	0x0d, 2	; 13
		1	  | 1	 |	0	|	32
		1	  | 1	 |	1	|	64
		
		F_CPU=16MHz -> F_SPI= F_CPU/16= 1MHz		 
	*/
	SPCR |=  (1<<SPR0);
  e8:	68 9a       	sbi	0x0d, 0	; 13
	SPCR &=~ (1<<SPR1);
  ea:	69 98       	cbi	0x0d, 1	; 13
	SPSR &=~ (1<<SPI2X);
  ec:	70 98       	cbi	0x0e, 0	; 14

	/*	Modo de funcionamiento 
		MSTR = 0, SPI como esclavo
		MSTR = 1; SPI como maestro
	*/
	SPCR |= (1<<MSTR);
  ee:	6c 9a       	sbi	0x0d, 4	; 13

	/* Activar SPI 
		SPE = 0, SPI desactivado
		SPE = |, SPI activado
	*/
	SPCR |= (1<<SPE);
  f0:	6e 9a       	sbi	0x0d, 6	; 13
}
  f2:	08 95       	ret

000000f4 <SPI_slaveON>:
//función de prender el esclavo
void SPI_slaveON(uint8_t slave)
{
	switch (slave)
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	09 f4       	brne	.+2      	; 0xfa <SPI_slaveON+0x6>
	{
		case 1:
		PORTB &=~ (1<<PORTB4); // (salida en 0)
  f8:	c4 98       	cbi	0x18, 4	; 24
  fa:	08 95       	ret

000000fc <SPI_tx>:
}
//FUNCIÓN PARA TRANSMITIR
void SPI_tx(uint8_t data)
{
	/* Cargar dato al registro */
	SPDR = data;
  fc:	8f b9       	out	0x0f, r24	; 15
	/* Esperar a que la transmisión se realice */
	while(!(SPSR & (1<<SPIF)));
  fe:	77 9b       	sbis	0x0e, 7	; 14
 100:	fe cf       	rjmp	.-4      	; 0xfe <SPI_tx+0x2>
	// dentro del while ( spif es 1, es decir que ya termino y sale del bucle)
}
 102:	08 95       	ret

00000104 <SPI_rx>:
//FUNCION PARA RECIBIR
uint8_t SPI_rx()
{
	/* Esperar a la recepción del dato */
	while(!(SPSR & (1<<SPIF)));   //cuando salga del while es decir que el registro ya está lleno y podemos leerlo
 104:	77 9b       	sbis	0x0e, 7	; 14
 106:	fe cf       	rjmp	.-4      	; 0x104 <SPI_rx>
	/* Retorna el dato recibido */
	return SPDR;
 108:	8f b1       	in	r24, 0x0f	; 15
 10a:	08 95       	ret

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
